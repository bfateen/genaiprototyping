AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Bedrock Chat application with Lambda, API Gateway, and S3 static website'

Parameters:
  BucketName:
    Type: String
    Description: Name for the S3 bucket to host the static website
    Default: bedrock-chat-frontend3

Resources:
  

  # Lambda Function for Chat
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: '*'

  ChatFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bedrock-chat-function
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              try:
                  # Parse the incoming message from the request body
                  body = event.get('body', '{}')
                  if isinstance(body, str):
                    body = json.loads(body)
                  
                  user_message = body.get('message', '')
                  if not user_message:
                    return {
                        'statusCode': 400,
                        'headers': {
                            'Access-Control-Allow-Origin': '*',
                            'Access-Control-Allow-Headers': 'Content-Type',
                            'Access-Control-Allow-Methods': 'OPTIONS,POST'
                        },
                        'body': json.dumps({'error': 'No message provided'})
                    }
                    
                  print("Loaded "+user_message)
                  
                  client = boto3.client("bedrock-runtime")
                  
                  msg = {
                      "role": "user",
                      "content": [
                          {"text": user_message}
                      ]
                  }
                  
                  response = client.converse(
                      modelId="amazon.titan-text-premier-v1:0",
                      messages=[msg],
                      inferenceConfig={
                          "maxTokens": 512,
                          "temperature": 0
                      },
                  )
                  
                  output = response["output"]["message"]
                  
                  # Return response with CORS headers
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST'
                      },
                      'body': json.dumps(output)
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128

  # API Gateway
  ChatAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: bedrock-chat-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  ChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ChatAPI.RootResourceId
      PathPart: chat
      RestApiId: !Ref ChatAPI

  ChatMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ChatResource
      RestApiId: !Ref ChatAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ChatResource
      RestApiId: !Ref ChatAPI
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ChatMethod
      - OptionsMethod
    Properties:
      RestApiId: !Ref ChatAPI

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref ChatAPI
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChatFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatAPI}/*/*/*

  #SECURED s3
  # S3 Bucket Cleanup Function
  S3CleanupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3CleanupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:GetObjectVersion
                  - s3:ListBucketVersions
                Resource: 
                  - !Sub 'arn:aws:s3:::${BucketName}'
                  - !Sub 'arn:aws:s3:::${BucketName}/*'

  S3CleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt S3CleanupRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import time

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def delete_bucket_contents(bucket_name):
              try:
                  logger.info(f"Starting cleanup of bucket: {bucket_name}")
                  s3 = boto3.client('s3')
                  
                  # Delete all object versions
                  paginator = s3.get_paginator('list_object_versions')
                  pages = paginator.paginate(Bucket=bucket_name)
                  
                  delete_list = []
                  
                  try:
                      for page in pages:
                          # Handle versions
                          if 'Versions' in page:
                              for version in page['Versions']:
                                  delete_list.append({
                                      'Key': version['Key'],
                                      'VersionId': version['VersionId']
                                  })
                          
                          # Handle delete markers
                          if 'DeleteMarkers' in page:
                              for marker in page['DeleteMarkers']:
                                  delete_list.append({
                                      'Key': marker['Key'],
                                      'VersionId': marker['VersionId']
                                  })
                          
                          if delete_list:
                              logger.info(f"Deleting {len(delete_list)} objects")
                              s3.delete_objects(
                                  Bucket=bucket_name,
                                  Delete={'Objects': delete_list}
                              )
                              delete_list = []
                      
                      # Final check for non-versioned objects
                      paginator = s3.get_paginator('list_objects_v2')
                      pages = paginator.paginate(Bucket=bucket_name)
                      
                      for page in pages:
                          if 'Contents' in page:
                              objects = [{'Key': obj['Key']} for obj in page['Contents']]
                              if objects:
                                  logger.info(f"Deleting {len(objects)} non-versioned objects")
                                  s3.delete_objects(
                                      Bucket=bucket_name,
                                      Delete={'Objects': objects}
                                  )
                      
                      logger.info(f"Successfully cleaned up bucket: {bucket_name}")
                      return True
                      
                  except Exception as e:
                      logger.error(f"Error during deletion: {str(e)}")
                      return False
                      
              except Exception as e:
                  logger.error(f"Error accessing bucket: {str(e)}")
                  return False

          def handler(event, context):
              logger.info('Received event: %s', event)
              response_data = {}
              
              try:
                  bucket_name = event['ResourceProperties']['BucketName']
                  
                  if event['RequestType'] == 'Delete':
                      # Attempt cleanup multiple times
                      max_attempts = 3
                      for attempt in range(max_attempts):
                          logger.info(f"Cleanup attempt {attempt + 1} of {max_attempts}")
                          if delete_bucket_contents(bucket_name):
                              break
                          if attempt < max_attempts - 1:
                              time.sleep(5)  # Wait before retry
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  
              except Exception as e:
                  logger.error(f"Error in handler: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

      Runtime: python3.9
      Timeout: 300  # Increased timeout to 5 minutes
      MemorySize: 256  # Increased memory

  PrivateS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      VersioningConfiguration:
        Status: Enabled

  BucketCleanupResource:
    Type: Custom::S3Cleanup
    DependsOn: PrivateS3Bucket
    Properties:
      ServiceToken: !GetAtt S3CleanupFunction.Arn
      BucketName: !Ref BucketName

  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref PrivateS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyUnsecuredTransport
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !Sub '${PrivateS3Bucket.Arn}/*'
              - !GetAtt PrivateS3Bucket.Arn
            Condition:
              Bool:
                'aws:SecureTransport': false

  S3UploaderRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3UploadAndSignPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub '${PrivateS3Bucket.Arn}/*'

  S3UploaderFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - ChatAPI
      - ApiStage
    Properties:
      Handler: index.handler
      Role: !GetAtt S3UploaderRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
              if event['RequestType'] in ['Create', 'Update']:
                  try:
                      s3 = boto3.client('s3')
                      bucket_name = event['ResourceProperties']['BucketName']
                      api_gateway = event['ResourceProperties']['ApiGateway']
                      aws_region = event['ResourceProperties']['AWSReg']
                      
                      # HTML content
                      html_content = """
                      <!DOCTYPE html>
                      <html>
                      <head>
                          <title>Bedrock Chat</title>
                          <style>
                              body { 
                                  font-family: Arial, sans-serif; 
                                  max-width: 800px; 
                                  margin: 0 auto; 
                                  padding: 20px;
                                  background-color: #f5f5f5;
                              }
                              #chat-container { 
                                  height: 500px; 
                                  overflow-y: auto; 
                                  border: 1px solid #ddd; 
                                  padding: 20px;
                                  background-color: white;
                                  border-radius: 8px;
                                  margin-bottom: 20px;
                              }
                              #input-container { 
                                  display: flex; 
                                  gap: 10px;
                                  margin-bottom: 20px;
                              }
                              #message-input { 
                                  flex-grow: 1; 
                                  padding: 10px;
                                  border: 1px solid #ddd;
                                  border-radius: 4px;
                                  font-size: 16px;
                              }
                              button {
                                  padding: 10px 20px;
                                  background-color: #007bff;
                                  color: white;
                                  border: none;
                                  border-radius: 4px;
                                  cursor: pointer;
                              }
                              button:hover {
                                  background-color: #0056b3;
                              }
                              .message {
                                  margin-bottom: 15px;
                                  padding: 10px;
                                  border-radius: 4px;
                                  max-width: 80%;
                              }
                              .user-message {
                                  background-color: #007bff;
                                  color: white;
                                  margin-left: auto;
                              }
                              .assistant-message {
                                  background-color: #e9ecef;
                                  color: black;
                              }
                              #loading {
                                  display: none;
                                  text-align: center;
                                  color: #666;
                                  padding: 10px;
                              }
                          </style>
                      </head>
                      <body>
                          <h1>Bedrock Chat</h1>
                          <div id="chat-container"></div>
                          <div id="loading">Assistant is typing...</div>
                          <div id="input-container">
                              <input type="text" id="message-input" placeholder="Type your message...">
                              <button onclick="sendMessage()">Send</button>
                          </div>
                          <script>
                              const apiUrl = 'AAAAA.execute-api.RRRR.amazonaws.com/prod/chat';
                              const messageInput = document.getElementById('message-input');
                              const chatContainer = document.getElementById('chat-container');
                              const loadingIndicator = document.getElementById('loading');
                              
                              messageInput.addEventListener('keypress', function(e) {
                                  if (e.key === 'Enter') {
                                      sendMessage();
                                  }
                              });
                              
                              async function sendMessage() {
                                  const message = messageInput.value.trim();
                                  if (!message) return;
                                  
                                  messageInput.value = '';
                                  appendMessageToChat(message, 'user');
                                  loadingIndicator.style.display = 'block';
                                  
                                  try {
                                      const response = await fetch('https://' + apiUrl, {
                                          method: 'POST',
                                          headers: {
                                              'Content-Type': 'application/json'
                                          },
                                          body: JSON.stringify({ message: message })
                                      });
                                      
                                      const data = await response.json();
                                      loadingIndicator.style.display = 'none';
                                      appendMessageToChat(data.content[0]['text'], 'assistant');
                                  } catch (error) {
                                      console.error('Error:', error);
                                      loadingIndicator.style.display = 'none';
                                      appendMessageToChat('Error: Failed to get response', 'assistant');
                                  }
                              }
                              
                              function appendMessageToChat(messageText, senderType) {
                                  const messageElement = document.createElement('div');
                                  messageElement.className = 'message ' + senderType + '-message';
                                  messageElement.textContent = messageText;
                                  chatContainer.appendChild(messageElement);
                                  chatContainer.scrollTop = chatContainer.scrollHeight;
                              }
                          </script>
                      </body>
                      </html>
                      """
                      
                      html_content = html_content.replace('AAAAA', api_gateway)
                      html_content = html_content.replace('RRRR', aws_region)

                      # Upload the HTML file
                      s3.put_object(
                          Bucket=bucket_name,
                          Key='index.html',
                          Body=html_content,
                          ContentType='text/html'
                      )
                      
                      # Generate presigned URL (valid for 7 days - maximum allowed)
                      presigned_url = s3.generate_presigned_url(
                          'get_object',
                          Params={
                              'Bucket': bucket_name,
                              'Key': 'index.html'
                          },
                          ExpiresIn=604800  # 7 days in seconds
                      )
                      
                      responseData = {
                          'SignedURL': presigned_url
                      }
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  except Exception as e:
                      print(f"Error: {str(e)}")
                      cfnresponse.send(event, context, cfnresponse.FAILED, {})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.9
      Timeout: 30

  UploadHTMLAndGenerateURL:
    Type: 'Custom::S3Upload'
    Properties:
      ServiceToken: !GetAtt S3UploaderFunction.Arn
      BucketName: !Ref PrivateS3Bucket
      ApiGateway: !Ref ChatAPI
      AWSReg: !Ref AWS::Region

Outputs:

  S3BucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref BucketName

  FrontendURL:
    Description: URL for the S3 static website
    Value: !GetAtt UploadHTMLAndGenerateURL.SignedURL
    
  BackendURL:
      Description: API Gateway endpoint URL
      Value: !Sub https://${ChatAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/chat

  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ChatAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/chat

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref ChatFunction

  LambdaFunctionARN:
    Description: ARN of the Lambda function
    Value: !GetAtt ChatFunction.Arn
