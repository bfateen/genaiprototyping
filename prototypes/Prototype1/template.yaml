AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Bedrock Chat application with Lambda, API Gateway, and S3 static website'

Parameters:
  BucketName:
    Type: String
    Description: Name for the S3 bucket to host the static website
    Default: bedrock-chat-frontend2

Resources:
  # S3 Bucket for Static Website
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join ['', [!GetAtt WebsiteBucket.Arn, '/*']]

  # Lambda Function for Chat
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: '*'

  ChatFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bedrock-chat-function
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              try:
                  # Parse the incoming message from the request body
                  body = event.get('body', '{}')
                  if isinstance(body, str):
                    body = json.loads(body)
                  
                  user_message = body.get('message', '')
                  if not user_message:
                    return {
                        'statusCode': 400,
                        'headers': {
                            'Access-Control-Allow-Origin': '*',
                            'Access-Control-Allow-Headers': 'Content-Type',
                            'Access-Control-Allow-Methods': 'OPTIONS,POST'
                        },
                        'body': json.dumps({'error': 'No message provided'})
                    }
                    
                  print("Loaded "+user_message)
                  
                  client = boto3.client("bedrock-runtime")
                  
                  msg = {
                      "role": "user",
                      "content": [
                          {"text": user_message}
                      ]
                  }
                  
                  response = client.converse(
                      modelId="anthropic.claude-3-5-sonnet-20240620-v1:0",
                      messages=[msg],
                      inferenceConfig={
                          "maxTokens": 512,
                          "temperature": 0
                      },
                  )
                  
                  output = response["output"]["message"]
                  
                  # Return response with CORS headers
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST'
                      },
                      'body': json.dumps(output)
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128

  # API Gateway
  ChatAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: bedrock-chat-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  ChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ChatAPI.RootResourceId
      PathPart: chat
      RestApiId: !Ref ChatAPI

  ChatMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ChatResource
      RestApiId: !Ref ChatAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ChatResource
      RestApiId: !Ref ChatAPI
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ChatMethod
      - OptionsMethod
    Properties:
      RestApiId: !Ref ChatAPI

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref ChatAPI
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChatFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatAPI}/*/*/*

  # Custom Resource for S3 Website Content
  S3UploaderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3UploadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Join ['', [!GetAtt WebsiteBucket.Arn, '/*']]

  S3UploaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt S3UploaderRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import os

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      s3 = boto3.client('s3')
                      bucket = event['ResourceProperties']['BucketName']
                      website_content = event['ResourceProperties']['WebsiteContent']
                      api_url = event['ResourceProperties']['ApiUrl']
                      region = event['ResourceProperties']['Region']
                      
                      # Replace placeholders in content
                      website_content = website_content.replace('${API_URL}', api_url)
                      website_content = website_content.replace('${REGION}', region)
                      
                      s3.put_object(
                          Bucket=bucket,
                          Key='index.html',
                          Body=website_content,
                          ContentType='text/html'
                      )
                      
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Runtime: python3.9
      Timeout: 30

  WebsiteContent:
    Type: Custom::S3Upload
    DependsOn: 
      - WebsiteBucket
      - ChatAPI
      - ApiStage
    Properties:
      ServiceToken: !GetAtt S3UploaderFunction.Arn
      BucketName: !Ref WebsiteBucket
      ApiUrl: !Ref ChatAPI
      Region: !Ref 'AWS::Region'
      WebsiteContent: |
        <!DOCTYPE html>
        <html>
        <head>
            <title>Bedrock Chat</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    max-width: 800px; 
                    margin: 0 auto; 
                    padding: 20px;
                    background-color: #f5f5f5;
                }
                #chat-container { 
                    height: 500px; 
                    overflow-y: auto; 
                    border: 1px solid #ddd; 
                    padding: 20px;
                    background-color: white;
                    border-radius: 8px;
                    margin-bottom: 20px;
                }
                #input-container { 
                    display: flex; 
                    gap: 10px;
                    margin-bottom: 20px;
                }
                #message-input { 
                    flex-grow: 1; 
                    padding: 10px;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    font-size: 16px;
                }
                button {
                    padding: 10px 20px;
                    background-color: #007bff;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                }
                button:hover {
                    background-color: #0056b3;
                }
                .message {
                    margin-bottom: 15px;
                    padding: 10px;
                    border-radius: 4px;
                    max-width: 80%;
                }
                .user-message {
                    background-color: #007bff;
                    color: white;
                    margin-left: auto;
                }
                .assistant-message {
                    background-color: #e9ecef;
                    color: black;
                }
                #loading {
                    display: none;
                    text-align: center;
                    color: #666;
                    padding: 10px;
                }
            </style>
        </head>
        <body>
            <h1>Bedrock Chat</h1>
            <div id="chat-container"></div>
            <div id="loading">Assistant is typing...</div>
            <div id="input-container">
                <input type="text" id="message-input" placeholder="Type your message...">
                <button onclick="sendMessage()">Send</button>
            </div>
            <script>
                const apiUrl = '${API_URL}.execute-api.${REGION}.amazonaws.com/prod/chat';
                const messageInput = document.getElementById('message-input');
                const chatContainer = document.getElementById('chat-container');
                const loadingIndicator = document.getElementById('loading');
                
                messageInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        sendMessage();
                    }
                });
                
                async function sendMessage() {
                    const message = messageInput.value.trim();
                    if (!message) return;
                    
                    messageInput.value = '';
                    appendMessageToChat(message, 'user');
                    loadingIndicator.style.display = 'block';
                    
                    try {
                        const response = await fetch('https://' + apiUrl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ message: message })
                        });
                        
                        const data = await response.json();
                        loadingIndicator.style.display = 'none';
                        appendMessageToChat(data.content[0]['text'], 'assistant');
                    } catch (error) {
                        console.error('Error:', error);
                        loadingIndicator.style.display = 'none';
                        appendMessageToChat('Error: Failed to get response', 'assistant');
                    }
                }
                
                function appendMessageToChat(messageText, senderType) {
                    const messageElement = document.createElement('div');
                    messageElement.className = 'message ' + senderType + '-message';
                    messageElement.textContent = messageText;
                    chatContainer.appendChild(messageElement);
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                }
            </script>
        </body>
        </html>

Outputs:

  S3BucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref BucketName

  FrontendURL:
    Description: URL for the S3 static website
    Value: !GetAtt WebsiteBucket.WebsiteURL
    
  BackendURL:
      Description: API Gateway endpoint URL
      Value: !Sub https://${ChatAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/chat

  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ChatAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/chat

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref ChatFunction

  LambdaFunctionARN:
    Description: ARN of the Lambda function
    Value: !GetAtt ChatFunction.Arn
