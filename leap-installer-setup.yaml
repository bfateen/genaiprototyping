AWSTemplateFormatVersion: '2010-09-09'
Description: 'Secure static website using Cognito Hosted UI'

Parameters:
  AdminEmail:
    Type: String
    Description: Email address for the admin user
    Default: admin@example.com
  
  InitialPassword:
    Type: String
    Description: Initial password for the admin user (must meet Cognito requirements)
    Default: Initial123!
    NoEcho: true
    
  

Resources:
  # S3 Bucket
  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        
  #SECURED s3
  # S3 Bucket Cleanup Function
  WebsiteCleanupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3CleanupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:GetObjectVersion
                  - s3:ListBucketVersions
                Resource: 
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}'
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}/*'

  WebsiteCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt WebsiteCleanupRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import time

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def delete_bucket_contents(bucket_name):
              try:
                  logger.info(f"Starting cleanup of bucket: {bucket_name}")
                  s3 = boto3.client('s3')
                  
                  # Delete all object versions
                  paginator = s3.get_paginator('list_object_versions')
                  pages = paginator.paginate(Bucket=bucket_name)
                  
                  delete_list = []
                  
                  try:
                      for page in pages:
                          # Handle versions
                          if 'Versions' in page:
                              for version in page['Versions']:
                                  delete_list.append({
                                      'Key': version['Key'],
                                      'VersionId': version['VersionId']
                                  })
                          
                          # Handle delete markers
                          if 'DeleteMarkers' in page:
                              for marker in page['DeleteMarkers']:
                                  delete_list.append({
                                      'Key': marker['Key'],
                                      'VersionId': marker['VersionId']
                                  })
                          
                          if delete_list:
                              logger.info(f"Deleting {len(delete_list)} objects")
                              s3.delete_objects(
                                  Bucket=bucket_name,
                                  Delete={'Objects': delete_list}
                              )
                              delete_list = []
                      
                      # Final check for non-versioned objects
                      paginator = s3.get_paginator('list_objects_v2')
                      pages = paginator.paginate(Bucket=bucket_name)
                      
                      for page in pages:
                          if 'Contents' in page:
                              objects = [{'Key': obj['Key']} for obj in page['Contents']]
                              if objects:
                                  logger.info(f"Deleting {len(objects)} non-versioned objects")
                                  s3.delete_objects(
                                      Bucket=bucket_name,
                                      Delete={'Objects': objects}
                                  )
                      
                      logger.info(f"Successfully cleaned up bucket: {bucket_name}")
                      return True
                      
                  except Exception as e:
                      logger.error(f"Error during deletion: {str(e)}")
                      return False
                      
              except Exception as e:
                  logger.error(f"Error accessing bucket: {str(e)}")
                  return False

          def handler(event, context):
              logger.info('Received event: %s', event)
              response_data = {}
              
              try:
                  bucket_name = event['ResourceProperties']['BucketName']
                  
                  if event['RequestType'] == 'Delete':
                      # Attempt cleanup multiple times
                      max_attempts = 3
                      for attempt in range(max_attempts):
                          logger.info(f"Cleanup attempt {attempt + 1} of {max_attempts}")
                          if delete_bucket_contents(bucket_name):
                              break
                          if attempt < max_attempts - 1:
                              time.sleep(5)  # Wait before retry
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  
              except Exception as e:
                  logger.error(f"Error in handler: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

      Runtime: python3.9
      Timeout: 300  # Increased timeout to 5 minutes
      MemorySize: 256  # Increased memory

  BucketCleanupResource:
    Type: Custom::S3Cleanup
    DependsOn: WebsiteBucket
    Properties:
      ServiceToken: !GetAtt WebsiteCleanupFunction.Arn
      BucketName: !Ref WebsiteBucket
      


  # Cognito User Pool with Hosted UI
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-users
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}-auth
      UserPoolId: !Ref UserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${AWS::StackName}-client
      GenerateSecret: false
      CallbackURLs: 
        - !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/callback
      LogoutURLs:
        - !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/signout
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      

  # Lambda for URL signing and callback handling
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}'
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:TagResource
                  - cloudformation:CreateChangeSet
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:PutRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:TagRole
                  - iam:CreateUser
                  - iam:DeleteUser
                  - iam:GetUser
                  - iam:ListUsers
                  - iam:UpdateUser
                  - iam:TagUser
                  - iam:UntagUser
                  - iam:CreateLoginProfile
                  - iam:DeleteLoginProfile
                  - iam:GetLoginProfile
                  - iam:UpdateLoginProfile
                  - iam:CreateAccessKey
                  - iam:DeleteAccessKey
                  - iam:ListAccessKeys
                  - iam:AttachUserPolicy
                  - iam:DetachUserPolicy
                  - iam:ListAttachedUserPolicies
                  - iam:PutUserPolicy
                  - iam:DeleteUserPolicy
                  - iam:ListUserPolicies
                  - iam:PassRole     
                  - iam:GetUserPolicy    
                Resource: '*'
              - Effect: Allow
                Action:
                  - tag:GetResources
                  - tag:TagResources
                  - tag:UntagResources
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'ApiGateway:*'
                  - 'bedrock:*'
                  - 'lambda:*'
                  - 'secretsmanager:*'
                  - 'aoss:*'
                  - 'cognito-idp:*'
                  - 'states:CreateStateMachine'
                  - 'states:StartExecution'
                Resource: '*'

  AuthHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import urllib.parse
          
          def handler(event, context):
              path = event['path']
              
              if path == '/callback':
                  # Handle OAuth callback
                  code = event['queryStringParameters'].get('code')
                  if not code:
                      return {
                          'statusCode': 302,
                          'headers': {
                              'Location': f"https://{os.environ['COGNITO_DOMAIN']}/login"
                          }
                      }
                  
                  # Generate signed URL for protected content
                  s3 = boto3.client('s3')
                  url = s3.generate_presigned_url(
                      'get_object',
                      Params={
                          'Bucket': os.environ['BUCKET_NAME'],
                          'Key': 'protected.html'
                      },
                      ExpiresIn=9600
                  )
                  
                  return {
                      'statusCode': 302,
                      'headers': {
                          'Location': url
                      }
                  }
              
              elif path == '/signout':
                  # Handle sign out
                  return {
                      'statusCode': 302,
                      'headers': {
                          'Location': f"https://{os.environ['COGNITO_DOMAIN']}/logout"
                      }
                  }
              
              # Default: redirect to Cognito login
              return {
                  'statusCode': 302,
                  'headers': {
                      'Location': f"https://{os.environ['COGNITO_DOMAIN']}/login?response_type=code&client_id={os.environ['CLIENT_ID']}&redirect_uri={urllib.parse.quote(os.environ['CALLBACK_URL'])}"
                  }
              }
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebsiteBucket
          COGNITO_DOMAIN: !Sub ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}-auth.auth.${AWS::Region}.amazoncognito.com
          CLIENT_ID: !Ref UserPoolClient
          CALLBACK_URL: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/callback

  # API Gateway
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Add root method (for base URL)
  RootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthHandlerFunction.Arn}/invocations
      ResourceId: !GetAtt Api.RootResourceId
      RestApiId: !Ref Api

  # Proxy resource for all other paths
  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref Api

  ProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthHandlerFunction.Arn}/invocations
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref Api

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - RootMethod
      - ProxyMethod
    Properties:
      RestApiId: !Ref Api

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref Api
      StageName: prod

  # Lambda permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AuthHandlerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*

  # Content uploader
  ContentUploaderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3UploadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub ${WebsiteBucket.Arn}/*

  WebAppFile:
    Type: 'Custom::S3Object'
    DependsOn: GetGithubRepoApiDeployment
    Properties:
      ServiceToken: !GetAtt ContentUploader.Arn
      BucketName: !Ref WebsiteBucket
      Key: index.html
      Body: !Sub |
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Cloud Prototype Launcher</title>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
            <style>
                :root {
                    --primary-bg: #f0f2f5;
                    --card-bg: #ffffff;
                    --primary-text: #1a1a1a;
                    --secondary-text: #666666;
                    --accent-color: #0066cc;
                    --border-radius: 12px;
                    --spacing: 20px;
                }

                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }

                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                    background-color: var(--primary-bg);
                    color: var(--primary-text);
                    line-height: 1.6;
                    padding: var(--spacing);
                }

                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    display: flex;
                    gap: var(--spacing);
                }

                .main-column {
                    flex: 7;
                }

                .side-column {
                    flex: 3;
                }

                .card {
                    background: var(--card-bg);
                    border-radius: var(--border-radius);
                    padding: var(--spacing);
                    margin-bottom: var(--spacing);
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    transition: transform 0.2s, box-shadow 0.2s;
                }

                .prototype-card {
                    cursor: pointer;
                }

                .prototype-card:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
                }

                .card-header {
                    display: flex;
                    align-items: center;
                    margin-bottom: 15px;
                }

                .card-icon {
                    width: 48px;
                    height: 48px;
                    margin-right: 15px;
                    border-radius: 8px;
                }

                .card-title {
                    font-size: 1.2rem;
                    font-weight: 600;
                    margin-bottom: 4px;
                }

                .card-services {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 8px;
                    margin-top: 10px;
                }

                .service-tag {
                    background: #e1e8ff;
                    color: #0044aa;
                    padding: 4px 8px;
                    border-radius: 4px;
                    font-size: 0.85rem;
                }

                .explainer-link{
                text-decoration:none;
                color: #0044aa;
                }

                .progress-bar {
                    display: none;
                    height: 6px;
                    background: #e1e8ff;
                    border-radius: 3px;
                    overflow: hidden;
                    margin: 20px 0;
                }

                .progress-fill {
                    height: 100%;
                    background: var(--accent-color);
                    width: 0%;
                    transition: width 0.3s ease;
                }

                .video-container {
                    position: relative;
                    padding-bottom: 15px;
                    height: 0;
                    overflow: hidden;
                }

                .video-container img {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                }

                .cost-card {
                    background: linear-gradient(135deg, #0066cc, #0044aa);
                    color: white;
                }

                .total-cost {
                    font-size: 2rem;
                    font-weight: 600;
                    margin: 10px 0;
                }

                .architecture-diagram {
                    display: none;
                    padding: 20px;
                    margin-top: 20px;
                }

                .services-flow {
                    display: flex;
                    flex-wrap: wrap;
                    justify-content: center;
                    gap: 20px;
                    position: relative;
                    padding: 20px 0;
                }

                .service-node {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    position: relative;
                    width: 120px;
                    cursor: pointer;
                }

                .service-icon {
                    width: 64px;
                    height: 64px;
                    background: #f5f5f5;
                    border-radius: 8px;
                    padding: 8px;
                    margin-bottom: 8px;
                    border: 2px solid #e1e8ff;
                }

                .service-name {
                    text-align: center;
                    font-weight: 500;
                    font-size: 0.9rem;
                }

                .service-arrow {
                    position: absolute;
                    top: 32px;
                    right: -24px;
                    width: 28px;
                    height: 2px;
                    background-color: #0066cc;
                }

                .service-arrow::after {
                    content: '';
                    position: absolute;
                    right: 0;
                    top: -4px;
                    border: 5px solid transparent;
                    border-left-color: #0066cc;
                }

                .deployment-info {
                    display: none;
                }

                .deployment-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 15px;
                    padding: 10px 0;
                    border-bottom: 1px solid #eee;
                }

                .deployment-status {
                    color: #00aa44;
                    font-weight: 500;
                    display: flex;
                    align-items: center;
                    gap: 6px;
                }

                .status-dot {
                    width: 8px;
                    height: 8px;
                    background-color: #00aa44;
                    border-radius: 50%;
                }

                .prototype-card.expanded {
                    min-height: 300px;
                }

                .prototype-card h3{
                display:none;
                }
                .prototype-card.expanded h3{
                display:block;
                }

                .service-desc{
                    display:none;
                }

                .service-node:hover .service-desc{
                    display:block;
                }
                 .truncated-link {
                display: inline-block;
                max-width: 500px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
              }

              .launchbut{
              padding:5px 10px;margin-top:30px;float:right;background:#002194;color:white;border-radius:7px;text-decoration:none;
              }
              .deletebut{
                            padding:5px 10px;margin-top:0px;float:right;background:#fe3549;color:white;border-radius:7px;text-decoration:none;
              }

              
              .overlay {
                  display: none;
                  position: fixed;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  background-color: rgba(0, 0, 0, 0.6);
                  z-index: 9999;
              }

              .modal-popup {
                  position: absolute;
                  top: 50%;
                  left: 50%;
                  transform: translate(-50%, -50%);
                  background-color: white;
                  padding: 20px;
                  border-radius: 8px;
                  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                  max-width: 600px;
                  width: 90%;
              }

              #modal-title {
                  margin: 0 0 15px 0;
                  color: #333;
                  font-size: 1.5em;
              }

              #modal-message {
                  margin-bottom: 20px;
                  color: #666;
              }

              .models-table {
                  width: 100%;
                  overflow-x: auto;
              }

              .models-table table {
                  width: 100%;
                  border-collapse: collapse;
              }

              .models-table th,
              .models-table td {
                  padding: 12px;
                  text-align: left;
                  border-bottom: 1px solid #eee;
              }

              .models-table th {
                  background-color: #f5f5f5;
                  font-weight: 600;
              }

              .status-enabled {
                  color: #00aa44;
                  font-weight: 500;
              }

              .status-disabled {
                  color: #ff4444;
                  font-weight: 500;
              }

              .enable-button {
                  padding: 6px 12px;
                  background-color: #0066cc;
                  color: white;
                  border: none;
                  border-radius: 4px;
                  cursor: pointer;
                  text-decoration: none;
                  display: inline-block;
              }

              .enable-button:hover {
                  background-color: #0052a3;
              }
            </style>
        </head>
        <body style="background:#f0eeef !important">
        <style>    .top-nav {
            width: 100%;
            background-color: #000;
            padding: 15px 0;
            margin-bottom:20px;
        }

        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
        }

        .logo {
            color: #fff;
            font-size: 24px;
            font-weight: bold;
            text-decoration: none;
        }

        .signup-btn {
            background: #0066cc;
            color: #fff;
            padding: 8px 20px;
            border-radius: 4px;
            text-decoration: none;
            font-weight: 500;
        }

        .signup-btn:hover {
            background: #0052a3;
        }
        </style>
        <div class="top-nav">
            <div class="nav-container">
                <a href="#" class="logo"><img src="https://www.pikpng.com/pngl/b/524-5240809_aws-logo-svg-white-clipart.png" style="width:auto;height:25px;position:relative;top:5px;margin-right:10px;">LEAP - Instant Prototypes</a>
                   <div><a id="editmodels" href="#" style="color:white;text-decoration:none;margin-right:15px;">Loading...</a><a href="https://aws.amazon.com/startups/credits" target="_blank" class="signup-btn">Apply for Activate credits</a></div>
            </div>
        </div>   

            <div class="container">
                <div class="main-column">
                  <!--  <h1 style="margin-bottom: var(--spacing)">LEAP
                 
                    </h1>
                    -->
                    <div id="prototype-list"></div>
                </div>
                
                <div class="side-column">
                    <!--<div class="card">
                        <h2>Welcome Guide</h2>
                        <div class="video-container">
                            <iframe width="360" height="215" src="https://www.youtube.com/embed/JBXSwvdJJ6Q?si=_Cq1hFC0nA0Dgqhk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
                        </div>
                    </div>-->

                     <style>
                .accordion {
                width: 100%;
                border: 1px solid #ddd;
                border-radius: 4px;
              }

              .accordion-item {
                border-bottom: 1px solid #ddd;
              }

              .accordion-item:last-child {
                border-bottom: none;
              }

              .accordion-header {
                padding: 15px;
                background-color: #f4f4f4;
                cursor: pointer;
                user-select: none;
              }

              .accordion-header:hover {
                background-color: #ebebeb;
              }

              .accordion-content {
                padding: 0 15px;
                max-height: 0;
            
                overflow: hidden;
                transition: max-height 0.3s ease-out;
              }

              .accordion-item .video-container {
                  height:auto !important;
              }

              .accordion-item.active .accordion-content {
                max-height: 400px; /* Adjust this value based on your content */
                padding: 15px;
              }

              .accordion-header::after {
                content: '+';
                float: right;
                font-weight: bold;
              }

              .accordion-item.active .accordion-header::after {
                content: '-';
              }

              .video-container p {
              margin-top:15px
              }

            </style>
           

            
            <div class="card">
                <div class="accordion">
                    <div class="accordion-item active">
                        <div class="accordion-header">Welcome Guide</div>
                        <div class="accordion-content">
                            
                            <div class="video-container">
                                <iframe width="360" height="215" src="https://www.youtube.com/embed/JBXSwvdJJ6Q?si=_Cq1hFC0nA0Dgqhk"
                                    title="YouTube video player" frameborder="0"
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                    referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
                              <p>Welcome to LEAP! Watch the video above for a quick intro or launch one of the prototypes to the left. All resources will be created for you with guides on how to customize each. Click on any highlighted term to learn about it.</p>
                            </div>
                            
                        </div>
                    </div>
                <!--
                    <div class="accordion-item">
                        <div class="accordion-header">API Gateway</div>
                        <div class="accordion-content">
                            <div class="video-container">
                                <iframe width="360" height="215" src="https://www.youtube.com/embed/JBXSwvdJJ6Q?si=_Cq1hFC0nA0Dgqhk"
                                    title="YouTube video player" frameborder="0"
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                    referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
                            <p>S3 is A full-stack RAG application that enables intelligent document interactions.</p>
                            <p><a href="#" style="margin-right:20px">Documentation</a><a href="#">Full video</a></p>
                        </div>
                        </div>
                    </div>
                
                    <div class="accordion-item">
                        <div class="accordion-header">Section 3</div>
                        <div class="accordion-content">
                            <p>Content for section 3 goes here. This can be any HTML content.</p>
                        </div>
                    </div>
                -->
                </div>

            <!--
                <h2>Welcome Guide</h2>
                <div class="video-container">
                    <iframe width="360" height="215" src="https://www.youtube.com/embed/JBXSwvdJJ6Q?si=_Cq1hFC0nA0Dgqhk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
                </div>
            -->
            </div>
                    <!--
                    <div class="card cost-card" onclick="window.open('https://us-east-1.console.aws.amazon.com/billing/home?region=us-east-1#/freetier');" style="cursor:pointer !important;">
                        <h2>Explore Costs</h2>
                        <div class="total-cost" style="display:none">$127.84</div>
                        <p>Free Tier & Billing</p>
                    </div>
                    -->
                    <div style="" id="output"></div>
                </div>
            </div>

            <div id="overlay" class="overlay">
              <div class="modal-popup">
                  <h2 id="modal-title">Alert Title</h2>
                  <div id="modal-message">Main message goes here</div>
                  <div class="models-table">
                      <table>
                          <thead>
                              <tr>
                                  <th>Model Name</th>
                                  <th>Status</th>
                                  <th>Action</th>
                              </tr>
                          </thead>
                          <tbody id="models-list">
                          </tbody>
                      </table>
                  </div>
              </div>
          </div>

            
        <script>
                var appinfo = [];
                var models_access=[];
                var fulldata=null;
                var launching=false;
                var deleting=false;

                var prototypes = [
                    {
                        id: 1,
                        title: "Serverless API Backend",
                        description: "",
                        icon: "/api/placeholder/48/48",
                        videoUrl: "https://example.com/video1",
                        services: [],
                        estimatedCost: "$12/month"
                    },
                    {
                        id: 2,
                        title: "ML Model Training Pipeline",
                        description: "End-to-end pipeline for training and deploying machine learning models",
                        icon: "/api/placeholder/48/48",
                        videoUrl: "https://example.com/video2",
                        services: [],
                        estimatedCost: "$45/month"
                    },
                    {
                        id: 3,
                        title: "Real-time Analytics Dashboard",
                        description: "Interactive dashboard for processing and visualizing streaming data",
                        icon: "/api/placeholder/48/48",
                        videoUrl: "https://example.com/video3",
                        services: [],
                        estimatedCost: "$28/month"
                    }
                ];


                function showModal(title, message, models) {
                const overlay = document.getElementById('overlay');
                const modalTitle = document.getElementById('modal-title');
                const modalMessage = document.getElementById('modal-message');
                const modelsList = document.getElementById('models-list');

                // Set title and message
                modalTitle.textContent = title;
                modalMessage.textContent = message;

                // Clear existing models
                modelsList.innerHTML = '';

                // Add models to the table
                models.forEach(model => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                    <td>`+model.name+`</td>
                    <td class="`+(model.enabled ? 'status-enabled' : 'status-disabled')+`">
                        `+(model.enabled ? 'Enabled' : 'Not Enabled')+`
                    </td>
                    <td>
                       `+(!model.enabled ?
                                    `<a href="`+model.url+`" 
                                target="_blank" 
                                class="enable-button">Enable</a>` :
                                    '')+`
                    </td>
                `;
                            modelsList.appendChild(row);
                        });

                        // Show the overlay
                        overlay.style.display = 'block';
                    }

                    // Function to hide the modal
                    function hideModal() {
                        document.getElementById('overlay').style.display = 'none';
                    }

                function GetServiceIcon(name)
                {
                    for (var i=0;i<fulldata['files'].length;i++)
                    {
                        if (fulldata['files'][i]['name']==name)
                        {
                            return fulldata['files'][i]['public_url'];
                        }
                    }

                    return "";
                }

                function renderPrototypes() {
                    const container = $('#prototype-list');
                    var pindex = 0;

                    var modstr=''
                    fulldata["models_access"].forEach(model => {
                     if (model.enabled)
                        modstr=modstr+'<option value="'+model.id+'">'+model.name+'</option>';
                     });

            modstr = '<select class="modelsel" style="display:block;margin-bottom:10px;background:white;border:1px solid #ccc;border-radius:8px;padding:5px;">'+modstr+'</select>';

                    prototypes.forEach(prototype => {
                        const servicesHtml = prototype.services.map((service, index) => 
                            '<div class="service-node" data-index="' + pindex + '" data-service="' + 
                            service.name.toLowerCase().replace(/ /g, '') + '">' +
                            '<img src="' + GetServiceIcon(service.name.toLowerCase().replace(/ /g, '')) + 
                            '" alt="' + service.name + '" class="service-icon">' +
                            '<div class="service-name">' + service.name + 
                            '<p class="service-desc">' + service.desc + '</p></div>' +
                            (index < prototype.services.length - 1 ? '<div class="service-arrow"></div>' : '') +
                            '</div>'
                        ).join('');

                        pindex++;

                        var desc = LinkExplainers(prototype.description);
                        var fulldesc = LinkExplainers(prototype.fulldescription);

                        const card = $(
                            '<div class="card prototype-card" data-id="' + prototype.id + '" data-stackname="' + prototype.stackname + '">' +
                            '<div class="card-content"><div style="float:right">'+modstr+'<a href="#" data-id="' + prototype.id + '" class="launchbut" style="">Launch</a></div>' +
                            '<div class="card-header">' +
                            '<img src="' + prototype.iconurl + '" alt="' + prototype.title + ' icon" class="card-icon">' +
                            '<div>' +
                            '<div class="card-title">' + prototype.title + '</div>' +
                            '<div class="estimated-cost">' + prototype.estimatedCost + '</div>' +
                            '</div>' +
                            '</div>' +
                            '<p>' + desc + '</p>' +
                            '<div class="card-services">' +
                            prototype.services.map(service => 
                                '<span class="service-tag">' + LinkExplainers(service.name) + '</span>'
                            ).join('') +
                            '</div>' +
                            '</div>' +
                            '<div class="progress-bar">' +
                            '<div class="progress-fill"></div>' +
                            '</div>' +
                            '<div class="deployment-info">' +
                            '<div class="deployment-header">' +
                            '<h3>Deployment Architecture</h3>' +
                            '<div class="deployment-status">' +
                            '<div class="status-dot"></div>' +
                            'Active' +
                            '<a href="#" data-id="' + prototype.id + '" class="deletebut" style="">Delete</a><div class="timerdiv"></div>'+
                            '</div>' +
                            '</div>' +
                            '<div class="deployment-links"></div>' +
                            '<div class="architecture-diagram">' +
                            '<div class="services-flow">' +
                            servicesHtml +
                            '</div>' +
                            '</div>' +
                            '<div class="prototype-description">' +
                            '<p>' + fulldesc + '</p>' +
                            '</div>' +
                            '</div>' +
                            '</div>'
                        );
                        container.append(card);
                    });
                }

                async function fetchGithubRepoData() {

                    try {
                    const response = await fetch('https://${GetGithubRepoApi}.execute-api.${AWS::Region}.amazonaws.com/default/default', {
                            method: 'GET',
                            headers: {
                                'Accept': 'application/json',
                                'Origin': window.location.origin
                            },
                            mode: 'cors'
                        });

                        if (!response.ok) {
                            throw new Error('HTTP error! status: ' + response.status);
                        }

                        const data = await response.json();
                        console.log('Raw API Response:', data);

                        prototypes = data['prototypes'];
                        appinfo = data["appinfo"];
                        models_access = data["models_access"];
                        fulldata = data;

                        var tote=0;

                        for (const model of models_access) {
                            if (model.enabled)
                            {
                                tote=tote+1;
                                hasaccess=true;
                            }
                        }   

                        if (!hasaccess)
                          showModal("Bedrock Models", "You need to have access to at least one model to continue.", models_access);

                        $('#editmodels').html(tote+' models enabled');

                        renderPrototypes();
                        saveToLocalStorage('myAppState', data);
                        return data.body;

                    } catch (error) {
                        console.error('Error fetching repository data:', error);
                        alert('Error fetching repository data: ' + error.message);
                    }
                }

                async function deployPrototypeTemplate(id) {
                    const output = document.getElementById('output');
                const apiUrl = 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/initiate';

                    const tkey = 'protoscripts/' + id + '/template.yaml';

                    var replacements = [];

                    if ($(".prototype-card[data-id='"+id+"']").find('.modelsel option:selected').length)
                     replacements.push({Target:'amazon.titan-text-premier-v1:0',Replacement:$(".prototype-card[data-id='"+id+"']").find('.modelsel').val()});

                    //$(".prototype-card[data-id='"+id+"']").find('.modelsel option:selected').length > 0 ? $(".prototype-card[data-id='"+id+"']").find('.modelsel') : null
                  
                    try {
                        const initiateResponse = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ templateKey: tkey, templateBucket: appinfo['bucket'], replacements: replacements }),
                        });
                        const initiateData = await initiateResponse.json();
                        if (initiateResponse.ok) {
                            output.innerHTML = 'Stack creation initiated. Stack ID: ' + initiateData.stackId;
                            
                            $(".prototype-card[data-id='"+id+"']").attr('data-stackname',initiateData.stackName);

                            var prot = {};
                                          var pindex = 0;

                                          for (var i = 0; i < prototypes.length; i++)
                                              if (prototypes[i]['id'] == id) {
                                                  prot = prototypes[i];
                                                  pindex = i;
                                                  break;
                                              }
                            prototypes[pindex]['stackname']=initiateData.stackName;
                            fulldata['prototypes'] = prototypes;
                            saveToLocalStorage('myAppState', fulldata);


                            checkStatus(initiateData.stackName, id);
                        } else {
                            throw new Error(initiateData.error || 'Unknown error occurred');
                        }
                    } catch (error) {
                        output.innerHTML = 'Error: ' + error.message;
                    }
                }

                async function selfdestructStack(stackName,id) {
                const output = document.getElementById('output');
                const apiUrl = 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/self-destruct';

                    try {
                        const initiateResponse = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ stackName: stackName}),
                        });
                        const initiateData = await initiateResponse.json();
                        if (initiateResponse.ok) {
                          output.innerHTML = 'Stack auto-destroyed';
                                             
                          // checkStatus(stackName, id);

                        } else {
                            throw new Error(initiateData.error || 'Unknown error occurred');
                        }
                    } catch (error) {
                        output.innerHTML = 'Error: ' + error.message;
                    }
                }

                 function startCountdownTimer(pid, starttime = null)    
                 {                // Set 2 hour countdown
                    let countDownDate = starttime ? starttime : new Date().getTime() + (2 * 60 * 60 * 1000);
                    
                    // Create timer element
                    let timerElement = document.createElement('div');
                    timerElement.className = 'countdown-timer';
                    timerElement.style.float = 'right';
                    timerElement.style.fontSize = '14px';
                    timerElement.style.color = 'black;';
                    
                    // Add timer to card header
                    $('.prototype-card[data-id="'+pid+'"] .timerdiv').append(timerElement);
                    
                    // Update timer every second
                    let timer = setInterval(function() {
                        let now = new Date().getTime();
                        let distance = countDownDate - now;
                        
                        let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                        let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                        
                        timerElement.innerHTML = 'Auto-deletes in: '+hours+'h '+minutes+'m '+seconds+'s';
                        
                        // When countdown finishes
                        if (distance < 0) {
                            clearInterval(timer);
                            timerElement.innerHTML = "Initiating auto-delete...";
                            // Get stack name from prototype card
                            let stackName = $('.prototype-card[data-id="'+pid+'"]').attr('data-stackname');
                            // Call self destruct
                            deleteStack(stackName, pid);
                        }
                    }, 1000);
                }      

                async function deleteStack(stackName,id) {
                    const output = document.getElementById('output');
                const apiUrl = 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/delete-stack';

                    try {
                        const initiateResponse = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ stackName: stackName}),
                        });
                        const initiateData = await initiateResponse.json();
                        if (initiateResponse.ok) {
                            output.innerHTML = 'Stack deletion initiated';

                           checkStatus(stackName, id);

                        } else {
                            throw new Error(initiateData.error || 'Unknown error occurred');
                        }
                    } catch (error) {
                        output.innerHTML = 'Error: ' + error.message;
                    }
                }

                async function checkStatus(stackName, pid) {
                    const output = document.getElementById('output');
                const apiUrl = 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/check-status';

                    try {
                        while (true) {
                            const statusResponse = await fetch(apiUrl, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ stackName: stackName }),
                            });
                            const statusData = await statusResponse.json();
                            if (statusResponse.ok) {
                                output.innerHTML += '<br>Status: ' + statusData.status;
                                if (statusData.status.endsWith('_COMPLETE') || statusData.status.endsWith('_FAILED') || statusData.status.includes('does not exist')) {
                                    if (statusData.error) {
                                        output.innerHTML += '<br>Error: ' + statusData.error;
                                    }

                                     launching=false;
                                     deleting=false;

                                          var prot = {};
                                          var pindex = 0;

                                          for (var i = 0; i < prototypes.length; i++)
                                              if (prototypes[i]['id'] == pid) {
                                                  prot = prototypes[i];
                                                  pindex = i;
                                                  prototypes[i]['outputs'] = statusData.outputs;
                                                  break;
                                              }


                                    if (!statusData.status.includes('DELETE'))
                                    {
                                      if (statusData.outputs) {
                                          
                                          var outputs = statusData.outputs;
                                          for (var key in outputs) {
                                              if (outputs.hasOwnProperty(key)) {
                                                  console.log('Output: ' + key + ' = ' + outputs[key]);

                                                  if (key == "FrontendURL")
                                                      prototypes[i]['frontend'] = outputs[key];
                                                  else if (key == "BackendURL")
                                                      prototypes[i]['backend'] = outputs[key];
                                              }
                                          }
                                      }

                                      PrototypeDeployed(pid, pindex);
                                      saveToLocalStorage('myAppState', fulldata);

                                      selfdestructStack(stackName,pid);
                                      startCountdownTimer(pid);

                                    }
                                    else
                                    {
                                       PrototypeDeleted(pid, pindex);
                                       saveToLocalStorage('myAppState', fulldata);
                                    }

                                    break;
                                }
                            } else {
                                throw new Error(statusData.error || 'Unknown error occurred');
                            }
                            await new Promise(resolve => setTimeout(resolve, 5000));
                        }
                    } catch (error) {
                        output.innerHTML += '<br>Error checking status: ' + error.message;

                        if (error.message.includes('does not exist'))
                        {
                          var prot = {};
                                          var pindex = 0;

                                          for (var i = 0; i < prototypes.length; i++)
                                              if (prototypes[i]['id'] == pid) {
                                                  prot = prototypes[i];
                                                  pindex = i;
                                                  break;
                                              }

                           console.log('deleted');
                           PrototypeDeleted(pid, pindex);
                           saveToLocalStorage('myAppState', fulldata);
                        }
                    }
                }

                function PrototypeDeployed(id, index) {
                    const card = $(`.prototype-card[data-id="` + id + `"]`);
                    const progressBar = card.find('.progress-bar');
                    const architectureDiagram = card.find('.architecture-diagram');
                    const dlinks = card.find('.deployment-links');
                    const deploymentInfo = card.find('.deployment-info');

                    prototypes[index]['active']=true;

                    if (!prototypes[index]['deletetimer'])
                      prototypes[index]['deletetimer']= new Date().getTime() + (2 * 60 * 60 * 1000);

                    fulldata['prototypes'] = prototypes;

                    $(dlinks).html('<p>Frontend: <a target="_blank" class="truncated-link" href="' + prototypes[index]['frontend'] + '">' + prototypes[index]['frontend'] + '</a><br>Backend: <a target="_blank"  class="truncated-link"  href="' + prototypes[index]['backend'] + '">' + prototypes[index]['backend'] + '</a></p>');

                    if (prototypes[index]['custom_outputs'] && prototypes[index]['custom_outputs'].length)
                    {
                      for (var c=0;c<prototypes[index]['custom_outputs'].length;c++)
                      {
                        var kid = prototypes[index]['custom_outputs'][c]['id'];
                        if (prototypes[index]['outputs'].hasOwnProperty(kid))
                          $(dlinks).append('<p><a target="_blank" class="truncated-link" href="' + prototypes[index]['outputs'][kid] + '">' +prototypes[index]['custom_outputs'][c]['title'] + '</a></p>');
                      }
                    }
                    

                    progressBar.fadeOut(() => {
                        deploymentInfo.fadeIn();
                        architectureDiagram.fadeIn();
                    });
                }

                function PrototypeDeleted(id, index) {
                    const card = $(`.prototype-card[data-id="` + id + `"]`);
                    const progressBar = card.find('.progress-bar');
                    const architectureDiagram = card.find('.architecture-diagram');
                    const dlinks = card.find('.deployment-links');
                    const deploymentInfo = card.find('.deployment-info');
                    const cardContent = card.find('.card-content');

                    prototypes[index]['active']=false;
                    deleting=false;
                    prototypes[index]['deletetimer']=null;
                    prototypes[index]['stackname'] = "";
                    fulldata['prototypes'] = prototypes;

                    cardContent.fadeIn();
                    card.removeClass('expanded');


                    deploymentInfo.fadeOut();
                    architectureDiagram.fadeOut();
                    
                }

                 function GetServiceID(pid,service)
                {
                        var outputs = prototypes[pid]['outputs'];

                        //alert(pid+' '+JSON.stringify(outputs));

                        
                        for (var key in outputs) {
                            if (outputs.hasOwnProperty(key)) {
                                console.log('GetServiceID Output: ' + key + ' = ' + outputs[key]);

                                if ((service=="s3") && (key == "S3BucketName")) {
                                    return outputs[key];
                                }
                                else  if ((service == "lambda") && (key == "LambdaFunctionName")) {
                                    return outputs[key];
                                }
                                else if ((service == "apigateway") && (key == "ApiEndpoint")) {
                                    return outputs[key];
                                }
                            }
                        }

                        return "";
                }

                
                function LinkExplainers(words)
                {
                    var explainers = appinfo["explainers"];
                    console.log(appinfo);
                    explainers.forEach(function (explainer,index) {
                        var term = explainer.term;
                        var escapedTerm = term.replace(/[.*+?^{}$()|[\]\\]/g, '\\$&'); // Escape special characters
                        var regex = new RegExp('\\b' + escapedTerm + '\\b', 'gi');

                        words = words.replace(regex, function (match) {
                            return '<a href="#" class="explainer-link" data-index="' + index + '" data-explainer-id="' + explainer.name + '">' + match + '</a>';
                        });
                    });

                    return words;

                }

                function ShowExplainer(index)
                {
                      var explainers = appinfo.explainers;
                      var item = explainers[index];

                      if ($(".accordion-item[data-eid='" + index + "']").length)
                          $(".accordion-item[data-eid='" + index + "']").find('.accordion-header').click();
                      else
                      {
                        var doclinks = item['links'].length ? '<a target="_blank" href="'+item['links'][0]+'" style="margin-right:20px">Documentation</a>' : '';
                          $('.accordion').append('<div class="accordion-item" data-eid="' + index + '"> <div class="accordion-header">' + item['name'] + '</div> <div class="accordion-content"> <div class="video-container"> <iframe width="360" height="215" src="' + item['videoURL'] + '" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe> <p>' + item['description'] + '</p><p>'+doclinks+'</p></div> </div> </div>');
                          $(".accordion-item[data-eid='" + index + "']").find('.accordion-header').click();
                      }
                }

                const getRandomNumber = (min, max) => {
                    return Math.floor(Math.random() * (max - min + 1)) + min;
                }

                function deployPrototype(id) {
            const card = $(".prototype-card[data-id='"+id+"']");
            const cardContent = card.find('.card-content');
            const progressBar = card.find('.progress-bar');
            const progressFill = card.find('.progress-fill');
            const deploymentInfo = card.find('.deployment-info');
            const architectureDiagram = card.find('.architecture-diagram');
            
            // Add expanded class for smooth transition
            card.addClass('expanded');

            deployPrototypeTemplate(id);
            
            // Hide card content, show progress bar
            cardContent.fadeOut();
            progressBar.fadeIn();
            
            // Simulate deployment progress
            let progress = 0;
            const interval = setInterval(() => {

                if (progress<65)
                  progress += getRandomNumber(1,5);              
                   else
                  progress += getRandomNumber(1,3);                 

                if (progress >= 100) {
                    progress = 100;
                    clearInterval(interval);
                    setTimeout(() => {

                       
                    }, 1000);
                }
                progressFill.css('width', progress+"%");
            }, 500);
        }

        const saveToLocalStorage = (key, dictionary) => {
                try {
                    const serializedData = JSON.stringify(dictionary);
                    localStorage.setItem(key, serializedData);
                    return true;
                } catch (error) {
                    console.error('Error saving to localStorage:', error);
                    return false;
                }
            };

            // Function to load a dictionary from localStorage
            const loadFromLocalStorage = (key, defaultValue = null) => {
                try {
                    const serializedData = localStorage.getItem(key);
                    if (serializedData === null) {
                        return defaultValue;
                    }
                    return JSON.parse(serializedData);
                } catch (error) {
                    console.error('Error loading from localStorage:', error);
                    return defaultValue;
                }
            };

                // Initialize when document is ready
                $(document).ready(() => {
                    
                    var loadedDict = loadFromLocalStorage('myAppState');

            if (loadedDict)
            {
                fulldata = loadedDict;

                prototypes = loadedDict['prototypes'];
                appinfo = loadedDict["appinfo"];

                renderPrototypes();

                var pindex=0;

                prototypes.forEach(prototype => {
                    if (prototype.active)
                    {
                        const card = $(".prototype-card[data-id='" + prototype.id + "']");
                        const cardContent = card.find('.card-content');
                        card.addClass('expanded');
                        cardContent.fadeOut();
                          PrototypeDeployed(prototype.id, pindex);

                        if (prototype.active && (prototype.deletetimer))
                        {
                          startCountdownTimer(prototype.id, prototype.deletetimer);
                        }
                    }
                    pindex++;
                });



                //alert('loaded cache');
            }
            else
            fetchGithubRepoData();

               $(document).on('click', '.accordion-header', function () {

                           const accordionItem = this.parentElement;

                        // Get all accordion items
                        const allAccordionItems = document.querySelectorAll('.accordion-item');

                        // Remove active class from all items
                        allAccordionItems.forEach(item => {
                            if (item !== accordionItem) {
                                item.classList.remove('active');
                                $(item).find('.accordion-content').css('maxHeight','');
                                $(item).find('.accordion-content').css('minHeight','');
                                //min-height:400px;
                            }
                        });

                        // Toggle active class on clicked item
                        accordionItem.classList.toggle('active');

                        const computedStyle = window.getComputedStyle($(accordionItem).find('.video-container')[0]);
                        const height = parseFloat(computedStyle.height)+15;
                
                        $(accordionItem).find('.accordion-item.active .accordion-content').css('maxHeight', height+'px');
                        $(accordionItem).find('.accordion-item.active .accordion-content').css('minHeight','400px');

                });

                     

                    $(document).on('click', '#overlay', function(e) {
                     //e.preventDefault();

                        if (e.target === this) {
                        hideModal();
                        }


                      });
        
                    $(document).on('click', '#editmodels', function(e) {
                      e.preventDefault();

                      showModal("Bedrock Models", "You need to have access to at least one model to continue.", fulldata["models_access"]);


                    });
                    
                    $(document).on('click', '.launchbut', function() {

                    if (launching)
                    {
                      alert('Please wait until current launch completes...');
                      return;
                    }

                    launching=true;

                        if (!$(this).parent().find('.deployment-info').is(':visible')) {
                            const id = $(this).data('id');
                            deployPrototype(id);
                        }
                    });

                   $(document).on('click', '.deletebut', function() {

                   if (deleting)
                    {
                      alert('Please wait until current delete completes...');
                      return;
                    }

                    deleting=true;

                    var id = $(this).data('id');
                    var stackname = $(".prototype-card[data-id='"+id+"']").attr('data-stackname');
                    deleteStack(stackname,id);

                   });
       

                    $(document).on('click', '.service-node', function() {
                        var pindex = $(this).data('index');
                        var service = $(this).data('service');
                        var outputs = prototypes[pindex].outputs;
                        var url = '';

                        if (service === 's3' && outputs.S3BucketName) {
                    url = "https://s3.console.aws.amazon.com/s3/buckets/" + outputs.S3BucketName;
                } else if (service === 'lambda' && outputs.LambdaFunctionName) {
                    url = "https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/" + outputs.LambdaFunctionName;
                } else if (service === 'apigateway' && outputs.ApiEndpoint) {
                    url = "https://console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/" + outputs.ApiEndpoint;
                } else   if (service === 'bedrock') {
                    url = "https://us-east-1.console.aws.amazon.com/bedrock/home" ;
                }

                        if (url) {
                            window.open(url, '_blank').focus();
                        }
                    });

                    $(document).on('click', '.explainer-link', function() {
                        ShowExplainer($(this).data('index'));
                    });
                });
            </script>
            </body>
            </html>

  ContentUploader:
    Type: AWS::Lambda::Function
    DependsOn: GetGithubRepoApiDeployment
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt ContentUploaderRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      s3 = boto3.client('s3')
                      bucket = event['ResourceProperties']['BucketName']
                      body = event['ResourceProperties']['Body']
                      
                      # Upload protected content
                      s3.put_object(
                          Bucket=bucket,
                          Key='protected.html',
                          Body=body,
                          ContentType='text/html'
                      )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': 'Content uploaded successfully'
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })

  

  # Cognito user creator
  CognitoUserCreatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminSetUserPassword
                Resource: !GetAtt UserPool.Arn

  CognitoUserCreator:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt CognitoUserCreatorRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          
          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      user_pool_id = event['ResourceProperties']['UserPoolId']
                      email = event['ResourceProperties']['AdminEmail']
                      password = event['ResourceProperties']['InitialPassword']
                      
                      cognito = boto3.client('cognito-idp')
                      
                      try:
                          cognito.admin_create_user(
                              UserPoolId=user_pool_id,
                              Username=email,
                              UserAttributes=[
                                  {'Name': 'email', 'Value': email},
                                  {'Name': 'email_verified', 'Value': 'true'}
                              ],
                              MessageAction='SUPPRESS'
                          )
                      except cognito.exceptions.UsernameExistsException:
                          print(f"User {email} already exists")
                      
                      time.sleep(2)
                      
                      cognito.admin_set_user_password(
                          UserPoolId=user_pool_id,
                          Username=email,
                          Password=password,
                          Permanent=True
                      )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': f'User {email} configured successfully'
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })

  CreateCognitoUser:
    Type: Custom::CognitoUser
    DependsOn: UserPool
    Properties:
      ServiceToken: !GetAtt CognitoUserCreator.Arn
      UserPoolId: !Ref UserPool
      AdminEmail: !Ref AdminEmail
      InitialPassword: !Ref InitialPassword

  InitiateStackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InitiateStackFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              cloudformation = boto3.client('cloudformation')
              
              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'OPTIONS,POST'
              }

              try:
                  body = json.loads(event['body'])
                  template_key = body.get('templateKey')
                  template_bucket = body.get('templateBucket')
                  replacements = body.get('replacements', [])
                  #len(replacements)
                  if False:
                      template_body=''
                      # Read content from S3
                      try:
                          s3 = boto3.client('s3')
                          response = s3.get_object(Bucket=template_bucket, Key=template_key)
                          
                          # Handle large files by streaming
                          chunk_size = 1024 * 1024  # 1MB chunks
                          content = []
                          stream = response['Body']
                          
                          for chunk in iter(lambda: stream.read(chunk_size), b''):
                              content.append(chunk)
                          
                          template_body = b''.join(content).decode('utf-8')
                          
                          result = template_body
                          
                          # Perform replacements
                          for item in replacements:
                              
                              target = item.get('Target', '')
                              replacement = item.get('Replacement', '')
                              
                              if target:
                                  # Count occurrences before replacement
                                  occurrences = result.count(target)
                                  
                                  # Perform replacement
                                  new_result = result.replace(target, replacement)
                                  
                                  result = new_result
                          
                          template_body=result

                          
                      except Exception as e:
                          
                          return {
                              'statusCode': 404,
                              'body': f"error: {e}"
                          }
                          
                      stack_params = {
                          'TemplateBody': template_body
                      }
                  elif template_key and template_bucket:
                      stack_params = {
                          'TemplateURL': f'https://{template_bucket}.s3.amazonaws.com/{template_key}'
                      }
                  else:
                      raise ValueError("Either templateBody or templateKey+templateBucket must be provided")

                  stack_name = f"WebAppStack{uuid.uuid4().hex[:8]}"
                  logger.info(f"Creating stack: {stack_name}")
                  
                  stack_params.update({
                      'StackName': stack_name,
                      'Capabilities': ['CAPABILITY_NAMED_IAM','CAPABILITY_NAMED_IAM','CAPABILITY_AUTO_EXPAND']
                  })
                  
          
                  response = cloudformation.create_stack(**stack_params)

                  logger.info(f"Stack creation initiated: {response['StackId']}")

                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'message': 'Stack creation initiated',
                          'stackId': response['StackId'],
                          'stackName': stack_name
                      })
                  }
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }
      Runtime: python3.8
      Timeout: 30

  CheckStackStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CheckStackStatusFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              cloudformation = boto3.client('cloudformation')

              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'OPTIONS,POST'
              }

              try:
                  body = json.loads(event['body'])
                  stack_name = body['stackName']

                  logger.info(f"Checking status for stack: {stack_name}")

                  stack = cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]
                  status = stack['StackStatus']
                  outputs = {output['OutputKey']: output['OutputValue'] for output in stack.get('Outputs', [])}

                  logger.info(f"Stack status: {status}")

                  response_body = {
                      'status': status,
                      'stackName': stack_name,
                      'outputs': outputs
                  }

                  if status.endswith('_FAILED'):
                      events = cloudformation.describe_stack_events(StackName=stack_name)['StackEvents']
                      for event in reversed(events):
                          if 'ResourceStatusReason' in event and event['ResourceStatus'].endswith('_FAILED'):
                              response_body['error'] = event['ResourceStatusReason']
                              logger.error(f"Stack creation failed: {response_body['error']}")
                              break

                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps(response_body)
                  }

              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }
      Runtime: python3.8
      Timeout: 30

  DeleteStackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeleteStackFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              cloudformation = boto3.client('cloudformation')
              
              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'OPTIONS,DELETE'
              }
              
              try:
                  body = json.loads(event['body'])
                  stack_name = body.get('stackName')
                  
                  if not stack_name:
                      raise ValueError("stackName must be provided")
                      
                  logger.info(f"Deleting stack: {stack_name}")
                  
                  response = cloudformation.delete_stack(
                      StackName=stack_name
                  )
                  
                  logger.info(f"Stack deletion initiated for {stack_name}")
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'message': 'Stack deletion initiated',
                          'stackName': stack_name
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }
      Runtime: python3.8
      Timeout: 30

  SelfDestructFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SelfDestructFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import time
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              # Create clients
              sfn = boto3.client('stepfunctions')
              iam = boto3.client('iam')

              DELETE_STACK_FUNCTION_ARN = '${DeleteStackFunction.Arn}'


              body = json.loads(event['body'])
              stack_name = body.get('stackName')
              
              # Create IAM Role for Step Functions
              role_name = f'StepFunctionsRole-{int(time.time())}'
              
              # Trust policy for Step Functions
              trust_policy = {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": "states.amazonaws.com"
                          },
                          "Action": "sts:AssumeRole"
                      }
                  ]
              }
              
              try:
                  # Create IAM role
                  role_response = iam.create_role(
                      RoleName=role_name,
                      AssumeRolePolicyDocument=json.dumps(trust_policy)
                  )
                  
                  logger.info(f"role created: {role_name}")

                  
                  # Allow Step Functions to invoke Lambda
                  lambda_policy = {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Action": [
                                  "lambda:InvokeFunction"
                              ],
                              "Resource": [
                                  DELETE_STACK_FUNCTION_ARN
                              ]
                          }
                      ]
                  }
                  
                  # Attach the policy to the role
                  iam.put_role_policy(
                      RoleName=role_name,
                      PolicyName='StepFunctionsLambdaInvoke',
                      PolicyDocument=json.dumps(lambda_policy)
                  )
                  
                  # Wait for role to propagate
                  time.sleep(10)
                  
                  logger.info(f"creating state_machine_definition")
                  
                  # State machine definition
                  state_machine_definition = {
                      "Comment": "A state machine that waits and then invokes a Lambda function with parameters",
                      "StartAt": "WaitState",
                      "States": {
                          "WaitState": {
                              "Type": "Wait",
                              "Minutes": 120,
                              "Next": "InvokeLambda"
                          },
                          "InvokeLambda": {
                              "Type": "Task",
                              "Resource": "arn:aws:states:::lambda:invoke",
                              "Parameters": {
                                  "FunctionName": DELETE_STACK_FUNCTION_ARN,
                                  "Payload": {
                                      "body": "{\"stackName\": \""+stack_name+"\"}"
                                  }
                              },
                              "End": True
                          }
                      }
                  }
                  
                  # Create state machine
                  response = sfn.create_state_machine(
                      name=f'DelayedLambdaExecution-{int(time.time())}',
                      definition=json.dumps(state_machine_definition),
                      roleArn=role_response['Role']['Arn'],
                      type='STANDARD'
                  )
                  
                  logger.info(f"created state_machine_definition")

                  
                  # Start execution of the state machine
                  execution = sfn.start_execution(
                      stateMachineArn=response['stateMachineArn']
                  )

                  headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'OPTIONS,POST'
                  }
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'message': 'State machine created and executed successfully',
                          'stateMachineArn': response['stateMachineArn'],
                          'executionArn': execution['executionArn']
                      })
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Runtime: python3.8
      Timeout: 30

  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: DeployStackAPI

  InitiateStackResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'initiate'

  InitiateStackMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref InitiateStackResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InitiateStackFunction.Arn}/invocations'

  InitiateStackOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref InitiateStackResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  CheckStatusResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'check-status'

  CheckStatusMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref CheckStatusResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckStackStatusFunction.Arn}/invocations'

  CheckStatusOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref CheckStatusResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  DeleteStackResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'delete-stack'

  DeleteStackMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref DeleteStackResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteStackFunction.Arn}/invocations'

  DeleteStackOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref DeleteStackResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'


  SelfDestructResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'self-destruct'

  SelfDestructMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref SelfDestructResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SelfDestructFunction.Arn}/invocations'

  SelfDestructOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref SelfDestructResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'


  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - InitiateStackMethod
      - InitiateStackOptionsMethod
      - CheckStatusMethod
      - CheckStatusOptionsMethod
      - DeleteStackMethod
      - DeleteStackOptionsMethod
      - SelfDestructMethod
      - SelfDestructOptionsMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'prod'

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt InitiateStackFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*'

  LambdaApiGatewayInvokeCheckStatus:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CheckStackStatusFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*'

  LambdaApiGatewayInvokeDeleteStack:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DeleteStackFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*'

  LambdaApiGatewayInvokeSelfDestruct:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SelfDestructFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*'

  GetGithubRepoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetGithubRepo
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import json
          import urllib.request
          import io
          import zipfile
          from datetime import datetime
          import urllib.parse
          import boto3
          import os
          from pathlib import Path
          from typing import List, Dict

          def check_bedrock_model_access(model_ids: List[Dict] = None) -> List[Dict]:
            try:
                # Initialize Bedrock client
                bedrock = boto3.client('bedrock')
                
                # Get list of all available models
                response = bedrock.list_foundation_models()
                
                available_models = {
                    model['modelId']: model['modelArn']
                    for model in response['modelSummaries']
                }
                
                # Process each model in the input list
                for model in model_ids:
                    try:
                        model_id = model['id']  # Get the ID from the dictionary
                        
                        if model_id not in available_models:
                            model['enabled'] = False
                            continue
                        
                        # Try to invoke the model with a minimal request
                        bedrock.get_foundation_model(modelIdentifier=model_id)
                        model['enabled'] = True
                        
                    except bedrock.exceptions.AccessDeniedException:
                        model['enabled'] = False
                    except bedrock.exceptions.ValidationException:
                        # Model exists but might not be enabled in the region
                        model['enabled'] = False
                    except Exception as e:
                        print(f"Unexpected error checking {model_id}: {str(e)}")
                        model['enabled'] = False
                        
                return model_ids
            
            except Exception as e:
                print(f"Error initializing Bedrock client: {str(e)}")
                # In case of error, return original list with enabled=False
                for model in model_ids:
                    model['enabled'] = False
                return model_ids

          def get_content_type(filename):
              extension = os.path.splitext(filename)[1].lower()
              content_types = {
                  '.txt': 'text/plain',
                  '.html': 'text/html',
                  '.htm': 'text/html',
                  '.css': 'text/css',
                  '.js': 'application/javascript',
                  '.json': 'application/json',
                  '.xml': 'application/xml',
                  '.md': 'text/markdown',
                  '.png': 'image/png',
                  '.jpg': 'image/jpeg',
                  '.jpeg': 'image/jpeg',
                  '.gif': 'image/gif',
                  '.pdf': 'application/pdf',
                  '.zip': 'application/zip'
              }
              return content_types.get(extension, 'application/octet-stream')
              
          def get_public_url(bucket_name, s3_key, region='us-east-1'):
              return f"https://{bucket_name}.s3.{region}.amazonaws.com/{s3_key}"

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              
              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Methods': 'GET,OPTIONS',
                  'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                  'Content-Type': 'application/json'
              }

              models_to_check = [
                  {'id':'anthropic.claude-v2','name':'Claude v2','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'},
                  {'id':'amazon.nova-lite-v1:0','name':'Amazon Nova Micro','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'},
                  {'id':'amazon.titan-text-express-v1','name':'Amazon Titan','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'},
                  {'id':'meta.llama3-1-70b-instruct-v1','name':'Meta LLama3','url':'https://us-east-1.console.aws.amazon.com/bedrock/home?region=us-east-1#/modelaccess'}
              ]
              
              # Check access
              access_results = check_bedrock_model_access(models_to_check)

              try:
                  download_url = "https://github.com/bfateen/genaiprototyping/archive/refs/heads/main.zip"
                  print(f"Downloading from: {download_url}")
                  
                  bucket_name = "${WebsiteBucket}"
                  folder_name = "protoscripts"
                  assets_folder_name = "assets"
                  
                  with urllib.request.urlopen(download_url) as response:
                      zip_content = response.read()
                  
                  with zipfile.ZipFile(io.BytesIO(zip_content)) as zip_ref:
                      all_files = zip_ref.namelist()
                      root_dir = all_files[0].split('/')[0]
                      processed_files = []
                      protos = []
                      
                      prototypes_prefix = f"{root_dir}/prototypes/"
                      assets_prefix = f"{root_dir}/assets/"
                      
                      maininfo = ""
                      
                      for filename in all_files:
                          if 'appinfo' in filename:
                              with zip_ref.open(filename) as f:
                                  maininfo = json.loads(f.read().decode('utf-8'))
                                  maininfo['bucket']=bucket_name
                                  
                      for filename in all_files:
                          if filename.startswith(assets_prefix):
                              try:
                                  relative_path = filename.replace(f"{root_dir}/assets/", "")
                                  with zip_ref.open(filename) as f:
                                      file_info = zip_ref.getinfo(filename)
                                      content = f.read()
                                      s3_key = f"{assets_folder_name}/{relative_path}"
                                      s3.put_object(
                                          Bucket=bucket_name,
                                          Key=s3_key,
                                          Body=content,
                                          ContentType=get_content_type(relative_path)
                                      )
                                      
                                      print("s3_key: "+s3_key)
                                      
                                      purl = s3.generate_presigned_url(
                                          'get_object',
                                          Params={
                                              'Bucket': bucket_name,
                                              'Key': s3_key
                                          },
                                          ExpiresIn=9600
                                      )
                                      
                                      public_url = get_public_url(bucket_name, s3_key)
                                      processed_files.append({
                                          'name': Path(s3_key).stem,
                                          'size': file_info.file_size,
                                          'last_modified': datetime(*file_info.date_time).isoformat(),
                                          's3_path': f"s3://{bucket_name}/{s3_key}",
                                          'public_url': purl
                                      })
                                      
                              except Exception as e:
                                  print(f"Error processing asset file '{filename}': {str(e)}")
                          
                          if filename.startswith(prototypes_prefix) and filename.endswith('/') and not filename.endswith('prototypes/'):
                              current_prototype = Path(filename).stem
                              with zip_ref.open(filename+"protoinfo.json") as f:
                                  obj = json.loads(f.read().decode('utf-8'))
                                  obj['id'] = current_prototype
                                  # Get signed url for icon
                                  
                                  iconpath = obj['icon']
                                  fipath = "genaiprototyping-main/prototypes/" + current_prototype +"/"+ iconpath
                                  print('iconpath '+fipath)
                                  
                                  with zip_ref.open(fipath) as fi:
                                      icontent = fi.read()
                                      s3_key = folder_name+"/" + current_prototype +"/"+ iconpath
                                      relative_path = fipath.replace(prototypes_prefix, '')
                                      
                                      s3.put_object(
                                          Bucket=bucket_name,
                                          Key=s3_key,
                                          Body=content,
                                          ContentType=get_content_type(relative_path)
                                      )
                                      
                                      purl = s3.generate_presigned_url(
                                          'get_object',
                                          Params={
                                              'Bucket': bucket_name,
                                              'Key': s3_key
                                          },
                                          ExpiresIn=9600
                                      )
                                      
                                      obj['iconurl'] = purl
                                  
                                  protos.append(obj)
                          
                          if filename.startswith(prototypes_prefix) and not filename.endswith('/'):
                              try:
                                  file_info = zip_ref.getinfo(filename)
                                  relative_path = filename.replace(prototypes_prefix, '')
                                  
                                  with zip_ref.open(filename) as f:
                                      content = f.read()
                                      s3_key = f"{folder_name}/{relative_path}"
                                      s3.put_object(
                                          Bucket=bucket_name,
                                          Key=s3_key,
                                          Body=content,
                                          ContentType=get_content_type(relative_path)
                                      )
                                      
                                      
                              except Exception as e:
                                  print(f"Error processing prototype file '{filename}': {str(e)}")
                  
                  processed_files.sort(key=lambda x: x['name'])
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'appinfo': maininfo,
                          'prototypes': protos,
                          'file_count': len(processed_files),
                          'files': processed_files,
                          'models_access':access_results
                      })
                  }
                  
              except Exception as e:
                  print(f"Unexpected error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }

      Runtime: python3.8
      Timeout: 300
      MemorySize: 256

  GetGithubRepoApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GetGithubRepoApi
      Description: API for GetGithubRepo Lambda function

  GetGithubRepoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GetGithubRepoApi
      ParentId: !GetAtt GetGithubRepoApi.RootResourceId
      PathPart: 'default'

  GetGithubRepoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GetGithubRepoApi
      ResourceId: !Ref GetGithubRepoResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetGithubRepoFunction.Arn}/invocations'

  GetGithubRepoOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GetGithubRepoApi
      ResourceId: !Ref GetGithubRepoResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  GetGithubRepoApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetGithubRepoMethod
      - GetGithubRepoOptionsMethod
    Properties:
      RestApiId: !Ref GetGithubRepoApi
      StageName: default

  GetGithubRepoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetGithubRepoFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GetGithubRepoApi}/*'

Outputs:
  LoginUrl:
    Description: URL to access the protected content (redirects to Cognito login)
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/

  AdminUsername:
    Description: Admin username (email)
    Value: !Ref AdminEmail

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  Instructions:
    Description: Instructions to access the protected content
    Value: !Sub |
      1. Open the login URL provided above
      2. You will be redirected to the Cognito hosted UI
      3. Login with:
         Username: ${AdminEmail}
         Password: ${InitialPassword}
      4. After successful login, you'll be automatically redirected to the protected content
